Today,
  [1] 어제 진도 못 나간 메타데이터부터
  [2] 구조 요소
  [3] 목록과 표
  
 --start--
 
[1] metadata 메타데이터 요소
1. 메타데이터의 역할
 - 데이터를 설명하는 데이터, 메타데이터
 - html도 문서 자체가 data

-- metadata 속성--
2. 문서 제목 title
 - 웹페이지를 설명한 제목을 title 태그 사이에 내용에 넣는다
 - 문자열만 작성 가능
 - 웹페이지를 즐겨찾기할 때 기본 이름으로 출력된다
 - 페이지의 정보를 수집할 때 title 안에 내용이 검색 엔진의 결과에 영향을 크게 미친다

3. 문서레벨 메타데이터 meta
 - meta 태그를 여러개 작성을 해서 데이터, html 문서 정보 등을 나타낼 수 있다
 - 속성 name, content를 이용해 이름과 값을 쌍으로 작성할 수 있다
 - 표준 메타데이터 이름을 참고하여 목적에 맞게 작성하고 꼼꼼하게 검토하는 것은 권장한다

4. meta 문자인코딩, 뷰포트
 - charset : 문자 인코딩 환경을 설정하는 속성
 *UTF-8 : 과거에는 영어와 특수문자만을 컴퓨터에 작성을 했지만, 발전에 따라 여러 나라로 컴퓨터가 보급됨에 따라 여러 국가가 범용적으로 호환이 가능한 문자 인코딩 설정값
 - viewport
	- name 속성 중 하나
	- 전체 웹페이지에서 페이지를 볼 수 있는 영역 범위 지칭

5. 외부 리소스 연결 link
 - 필요한만큼 여러 개의 link 태그를 사용하면 된다
 - 스타일 시트를 연결할 때도 많이 사용하지만, 파비콘(확장자 .ico)이나 홈 아이콘을 불러와 적용할 때도 사용한다
 - 빈 요소
 - <link href="style/main.css" rel="stylesheet">
	- rel은 연결되는 링크가 문서와 어떤 관계가 있는지를 설명한다
 - 링크된 콘텐츠의  타입을 정의하는데 사용하는 속성은 type

6. MIME 타입
 - 리소르를 내려받아야 할 때 해당 문서가 어떤 타입인지 명시해줄 때 MIME 타입을 사용한다
 - MIME 타입 구조 : 대분류/서브타입

7. 스타일 정보 style
 - head 안에 위치, 그러나 외부 문서에 작성한 후 문서를 링크를 통해 불러오는 것을 권장한다
 - 같은 요소인 경우 아래의 코드가 위의 코드에 덮어쓰여진다

8. 스크립트 script
 - 보통 JS를 연결할 때 많이 사용한다
 - <style>과 동일하게 head 안에 script를 이용해 js 코드를 입력할 수 있으나 외부 문서로 따로 작성 권장
 - <script> 태그를 만나는 순간 해석을 우선한다. 때문에 script 태그는 body 하단에 작성하는 것을 추천한다.
 
 --next--
 
[2] 구조를 나타내는 요소
1. 컨테이너 div, span
1) div
 	- 매우 많이 사용되어지는 태그들
 	- 구역을 나누는 역할을 한다
 	- <div>는 '순수' 컨테이너로서 아무것도 표현하지 않는다 -> 얘 자체는 아무런 의미가 없다는 것
 	- 대부분은 스타일링 혹은 그룹 배치를 효율적으로 하기 위해 구역을 나눌 때 사용
2) span
	- div와 거의 같으나 div와 달리 인라인 요소
	- 대부분 텍스트를 꾸밀 때 span을 사용

2. 시멘틱
 - Semantic 시멘틱 : 의미론적인
 - 요소의 의미를 고려하여 구조를 설계하고 코드를 작성한다
 - 왜 출력되는 결과는 같으나 시멘틱 코드를 사용해야 하는가?
	- 검색 엔진은 의미론적 마크업을 페이지 분석 시 검색 랭킹에 영향을 줄 수 있는 중요한 키워드로 간주하기 때문
	- 스크린 리더 -> 접근성 향상
	- 코드의 가독성 향상

3. header, footer
 - 웹 페이지 내에서 이동이 있더라고 두 요소 모두 유지되는 경우가 대부분이다
 - 서로 간의 소속이 불가능하다

 1) header
	- 소개 및 탐색에 도움을 주는 콘텐츠 표시
	- 제목, 로고, 검색 폼, 작성자 이름 등 
	- 웹 페이지의 헤더는 하나만 사용해야 한다
 2) footer
	- 웹 정보, 연관 사이트 정보, 단체 소개, 연락처, 저작권 문구 등

4. nav
 - 네비게이션 바 (navigation bar)
 - 현재 페이지 또는 다른 페이지로의 링크를 보여주는 구획
 - 메뉴, 목차, 색인 등
 - 해당 영역 안에 목록의 형태를 띄고 있는 경우가 대부분이다
*목록 <ul>, <li>

5. aside
 - 사이드 바(또는 콜아웃 박스), 광고 영역을 만들 때 사용하는 태그
 - 문서의 주요 내용과 간접적으로만 연관된 부분을 나타낸다
 - nav와 달리 aside는 존재하지 않는다고 해서 페이지에 큰 영향을 주지 않는다

6. main
 - body 태그의 자식 요소로 사용되는 요소 -> 하나만 사용 가능
 - body 태그 내에 주요 콘텐츠를 나타낸다
 - main태그는 익스플로러에서 지원하지 않는 태그

7. article
 - 여러 개 사용 가능
 - 독립적으로 구분이 가능하여 배포하거나 재사용을 할 수 있는 구획 -> 단독적으로 사용하여도 내용을 이해하는 것에 문제 없이 사용이 가능해야 한다
 - 블로그, 매거진, 뉴스 기사 등
 - 영역 내에 header와 footer 사용도 가능

8. section
 - article과 거의 비슷한 성질을 가지지만 각각 의미가 있는 요소
 - article이 될 수 없는 영역에 section을 사용 -> 단독적인 content가 될 수 없는 영역에 section 사용
 - 단순한 스타일링의 목적이라면 <div>를 사용한다
