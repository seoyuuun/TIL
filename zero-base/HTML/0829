Today, To Do List
1) 2021.08.28 강의 내용 복습 (+google에서 내용 보충)
2) GitHub에 대한 내용 Searching
3) 이후 강의 선행학습


[2021.08.28 강의 내용 복습]
HTML이란?
프로그래밍을 처음 시작하는 이들이라면 대부분이 HTML과 CSS를 먼저 마주한다.
HTML은 'Hypetext Markup Languege'의 각 단어의 앞글자를 따 명칭한 언어이다.  
주로 웹 페이지의 골격, 즉 웹 문서의 기본적인 구조를 담당한다.

여기에서 하이퍼 텍스트(Hypertext)란 참조, 즉 하이퍼링크를 통해 독자가 한 문서에서 다른 문서로 즉시 접근할 수 있는 텍스트를 의미한다.
그리고 마크업 언어(Markup Languege)는 태그 등을 이용하여 문서나 데이터의 구조를 명시하는 언어를 의미한다. 
해당 파일이 프린터로 출력되거나 화면에서 어떻게 보여야 할 것인지는 나타내는 언어인 것이다.

HTML, CSS, 그리고 JavaScript는 순서대로 구조, 표현, 동작을 담당하는 언어들이며 이에 대해서는 앞으로 심층적으로 학습할 계획이다.

그렇다면 이 HTML은 어디서 view할 수 있을까?
PDF 문서가 PDF 뷰어에서 볼 수 있는 듯이, HTML은 .html이라는 확장자를 가지고 웹 브라우저(Web Browser)에서 열어 볼 수 있다.
웹 브라우저은 HTML 뷰어 기능 뿐만 아니라 다양한 부가 기능이 탑재되어 있어 개발자에 입장에서는 코드를 분석할 수 있도록 도와주는 역할 또한 한다.

웹 브라우저란, 쉽게 말한 우리가 사용하고 있는 Internet Explorer, Chrome, Firefox, Safari 등을 예시로 들 수 있다.
웹 브라우저는 웹 서버에서 이동하며 쌍방향으로 통신하고 HTML문서나 파일을 출력하는 그래픽 사용자 인터페이스 기반의 응용 소프트웨어라고 위키백과에서 설명하지만 코딩 초심자, 비전공자들이 이해하기에는 설명이 다소 어렵다.
쉽게 말해, 사용자들의 목적에 따라 여러 문서들을 펼쳐보는 컴퓨터 도구라고 생각하는 것이 쉬울 것이다.
이 웹 브라우저에서 개발자의 의도에 따라 정상적으로 문서들이 뷰잉할 수 있도록 웹 표준, 웹 접근성, 웹 호환성을 알아하며 이를 준수해야 한다.

먼저, 웹 표준은 말그대로 규칙이다. 
플랫폼, 웹 브라우저가 여러 개이지만 서로 다른 종류와 버전에서도 개발자의 의도대로 보여지는 웹 페이지를 만들 수 있도록 표준, 즉 기준을 정하여 이를 준수하도록 제정된 Ruel이다.
이 웹 표준을 웹 접근성을 향상시킬 수 있고, 웹 호환성이 가능하다.
웹 접근성이 향상될수록 다양한 브라우징 환경에 대응이 가능하며,   장애의 유무의 차이 없이 모두 기능을 이용할 수 있다.
동시에 웹 호환성이 가능해지며 위의 웹 표준의 목적대로 웹 브라우징 롼경에 관계없이 웹 사이트 접근이 가능해진다.
웹 호환성은 Cross Browsing이라고도 지칭한다.

다시 HTML로 넘어가보자.

HTML의 기본 구조는 아래 예시와 같다
<p>내용</p>

기본적으로 여는 태그(Opening tag), 내용(Content), 닫는 태그(Closing tag)로 구성된다.
그리고 이 세 개의 개념들을 묶어 요소(element)라고 지칭한다.
여는 태그는 구조가 시작되는 시작점, 반대로 닫는 태그는 구조가 끝나는 끝점이라고 볼 수 있다.
HTML은 줄바꿈을 무시하므로, 여는 태그부터 닫는 태그를 만나기 전까지 그 안에 작성된 것들이 모두 내용에 해당한다.
내용이 사용자들이 실질적으로 볼 수 있는 영역이며 꺾쇠 안의 태그킄 웹 브라우저의 사용자에게 표시되지 않는다.

기본적으로는 여는 태그와 닫는 태그를 쌍으로 하여 꼭 작성해야 하지만, 빈 요소(Empty Element)에 해당하는 요소들은 필수적으로 그러지 않아도 된다.
닫는 태그를 명시하지 않아도 된다는 것이다.
예시로 img, hr, br 등의 요소를 들 수 있다.
이러한 빈 요소로 사용할 수 있는 것들은 요소가 생성되는 시점부터 정해져 있기 때문에 빈 요소가 아닌 요소를 내용을 기재하지 않고 태그를 사용한다고 해서 빈 요소가 되지 않는다.

요소의 또 다른 특징으로 요소의 중첩을 들 수 있다.

<ul>
	<li>하나</li>
	<li>둘</li>
	<li>셋</li>
</ul>

위의 HTML 코드에서 ul 요소는 안에 li 요소 3개가 내용으로 가지고 있다고 할 수 있다.
요소 안에 다른 요소가 여러 개 들어있을 수 있다는 것이다.
이 때, ul은 부모요소(상위요소), li은 자식요소(하위요소)라고 한다.
자식 요소가 부모 요소 안에 소속되어 있는 것이다.
이를 구분하기 위해서 개발자는 코드를 작성할 때 들여쓰기를 기본으로 해야한다.
들여쓰기를 하지 않는다고 오류가 나지는 않지만 가독성을 위해 반드시, 들여쓰기는 기본이 되어야 한다는 것이다.

가독성과 이해를 위해 들여쓰기를 하는 것이 기본이라면 필요에 따라 같은 목적으로 주석을 추가할 수 있다.
주석은 개발자가 작성한 문서, 코드에 대한 설명이라고 볼 수 있는데 필요한 위치에, 필요한 내용만을 깔끔하게 적는 것을 권장한다.
브라우저는 이 주석을 완전히 무시하기 때문에 출력 결과에 적용되지 않는다는 특징이 있다.

위에서 HTML의 기본 구조에 대해서 설명했다면 이번에는 HTML 문서의 기본 구조에 대한 살펴보고자 한다.
HTML문서는 기본적으로 아래의 구조를 가지고 있으며 각 영역의 설명을 주석으로 작성했다.

<!--생략해도 문제없으나 선언의 관습화로 남아있는 태그, !DOCTYPE html-->
<!DOCTYPE html> 
<!--html, 하나의 문서에 하나만 존재. 최상위 요소 혹은 root 요소라고 지칭-->
<html>
	<head>
	<!--HEAD 영역 : 화면에는 표시되지 않는, 정보를 담고 있는 영역-->
	</head>
	<body>
	<!--BODY 영역 : 실질적으로 화면에 나타나는 모든 콘텐츠/ 영역-->
	</body>
</html>

그리고 body 영역에 한해서 태그는 컨테이너 역할을 하는, 구획을 나누는 태그와 그 자체로 요소인 태그로 나눌 수도 있다.
다른 기준으로 태그를 나눈다면 블록(Block)과 인라인(Inline)으로도 구분이 가능하다.

모든 요소들은 생성이 되는 시점부터 그 특성과 성질이 정해지는데 블록과 인라인 특성도 마찬가지이다.
다음은 블록과 인라인에 대한 특징을 설명한 것이다.

1. 블록(Block)
 - 가지고 있는 높이만큼 한 층, 즉 한 줄 영역을 차지한다.
 - 가로 길이는 부모 요소가 허용한 최대 길이
 - 다음 요소는 다음 줄부터 적용

 2. 인라인(Inline)
 - 줄의 어느 곳에서나 시작할 수 있다
 - 이전 요소가 끝나는 지점부터 시작해서 내용(content)이 가지고 있는 만큼만 영역을 차지한다

HTML에서는 라인별로 맨 위에서부터 아래로 읽어 내려가며 웹 페이지에 적용된다.
CSS 요소를 별도로 주지 않았다면 맨 위의 라인은 웹 페이지의 좌상단에 위치하게 되는데, 
블록 요소는 온전히 한 행 영역을 차지하므로 만약 인라인 요소가 상단 라인에 작성되고 다음에 블록 요소가 작성되면 블록 요소는 다음 행에 나타난다.
반대로 블록 요소가 상단 라인에 작성된다면 인라인 요소가 다음 행에 나타난다.
인라인 요소는 블록 요소를 포함할 수 없지만 대부분의 블록 요소는 인라인 요소를 포함할 수 있기 때문이다.
추가적으로 별도의 코드를 작성하여 블록 요소를 인라인 요소의 특성을 가질 수 있도록 할 수 있으며 그 반대도 가능하다.

앞에서 구획을 나누는 요소 & 그렇지 않은 요소, 블록 요소 & 인라인 요소로 구분을 했다면 콘텐츠 카테고리로 요소를 구분할 수도 있다.
이 때 하나의 요소는 여러 카테고리 내의 포함 관계에 들어갈 수 있다.
각 콘텐츠 카테고리에 대한 설명은 아래와 같다.

1. 메타데이터 콘텐츠(Metadata content) : 문서의 메타데이터(정보), 다른 문서를 가리키는 링크 등을 나타내틑 요소
2. 플로우 콘텐츠(Flow content) : 거의 모든 요소가 포함
3. 섹션 콘텐츠(Section content) : 웹 문서의 구획을 나눌 때 사용
4. 헤딩 콘텐츠(Heading content) : 섹션의 제목과 관련된 요소
5. 프레이징 콘텐츠(Phrasing content) : 문단에서 텍스트를 마크업할 때 사용
6. 임베디드 콘텐츠(Embedded content) : 외부 소스를 가져오거나 삽입할 때 사용되는 구조
7. 인터렉티브 콘텐츠(Interative content) : 사용자와 상호작용을 위한 콘텐츠 요소




[Myself]
여기까지 8월 28일자에 강의를 수강한 내용을 내가 이해한 바대로 정리해봤다.
전체적으로 이미 아는 내용이기 때문에 숙지가 어렵지 않았지만 HTML 그 자체에 대한 정의와 웹 브라우저의 역할, 콘텐츠 카테고리에 대한 내용은 알지 못했던 내용이었다.
때문에 좀 더 심층적으로 이를 알 수 있었던 강의의 내용이 충분히 보람이었다.
HTML의 기본을 다시 정리해보면서 내가 왜 이 태그를 작성하고 있는지에 대해 본 의미를 생각해볼 수 있는 강의였다고 생각되어진다.
이 기회를 통해 기초를 탄탄히 하여 앞으로의 진도를 나감에 있어 막힘이 없기를 바란다.
논외로 현재 github의 사용이 미숙하여 매우 투박하게 TIL을 작성 중인데 이 점에 대해서 매우 불만족스럽다..
얼른 이 부분을 개선하기 위해 공부해야겠다..
