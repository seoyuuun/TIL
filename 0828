0828
>> HTML&CSS가 왜 지금 열심히 공부해야 할까?
 - 앞으로 우리의 발목을 잡히지 않기 위해 -> HTML&CSS 없이 웹 개발은 없다!
 - 지금 열심히 할수록 앞으로의 발전이 더디지 않을 수 있다
 
>> HTML과 웹 브라우저
 - HTML은 .html이라는 확장자를 가지고, web browser에서 열어 view할 수 있다
 - 단순히 뷰어 기능뿐만 아니라 다양한 부가기능이 탑재되어 있고 개발자 입장에서는 분석할 수 있도록 도와주는 여러 기능들이 웹 브라우저에 있다
 - HTML은 HyperText( : 웹 문서를 이루고 있는 요소들) Markup Language
 	- 작성은 인간이 하지만 이해의 주체는 컴퓨터(기계)가 한다는 점
 	- Markup 언어란?
	- 프로그래밍 언어는 data에 대한 action을 명령, 마크업 언어는 data이 어떤 역할을 가지고 있고 보여질지를 정의하는 언어(구조적 의미)

>> HTML, CSS 그리고 JavaScript
 - HTML -> 웹문서의 기본적인 구조 담당(구조)
 - CSS -> 각 요소들의 레이아웃, 스타일링을 담당(표현)
 - JS -> 동적인 요소 담당(동작)

>> 웹 표준/ 접근성 / 호환성
 - 웹 표준 : 웹 브라우저가 여러 개이지만 어떤 브라우저라도 개발자의 의도대로 보여지는 웹 페이지를 만들 수 있도록 표준을 정하여 이를 준수하도록 표준화가 제정됨
 - 웹 접근성 : 장애의 유무의 차이 없이 모두 웹 사이트를 이용할 수 있도록 하는 방식
 - 웹 호환성 : Cross Browsing, 웹 표준을 준수하여 웹 브라우저 버전, 종류 등 관계 없이 웹사이트에 접근

>> HTML이란?
 - element를 tag라는 표기법으로 작성
	 <p>내용</p>
	1. 여는 태그(Opening tag)
	2. 닫는 태그(Closing tag)
	3. 내용(Content) : 최종적으로 웹 브라우저에 표시되는 요소의 내용
	4. 요소(Element) : 위를 통틀어서 요소라고 지칭
 - 태그의 경우 대소문자를 구분하지는 않지만 소문자로 작성하는 것을 권장
 - HTML은 줄바꿈은 무시한다 -> 여는 태그부터 닫는 태그를 만나기 전까지 그 안에 작성된 것들이 모두 내용에 해당, 여러 줄에 거쳐서 작성 가능하다
 - 꺾쇠 안의 태그는 웹 브라우저의 사용자에게는 표시되지 않는다

>> 빈 요소
	- 이미지 : 외부의 주소값을 가져고 와서 소스 형태로 작성되는 것이 대부분
 	- 수평선
 	- 줄바꿈 : [Enter]를 친 것처럼 처리하도록 하는 element
 - 위의 세 요소들은 빈 요소(Empty element)라고 한다
 - 닫는 태그를 명시하지 않아도 된다
 예. <hr> <br> <img> <input>
 - 빈 요소로 사용할 수 있는 것들은 정해져 있기 때문에 빈 요소가 아닌 <p></p>를 내용 없이 작성했다고 빈 요소라고 할 수 없다.
 - 조금 더 정확히 빈 요소라는 것을 명시하고 싶으면 닫는 태그 형태로 작성한다
 - 빈 요소 작성 형태를 통일하는 것이 코드를 이해하는 면에서 권장된다

>>요소의 중첩
<ul>
	<li>하나</li>
	<li>둘</li>
	<li>셋</li>
</ul>

 - ul 요소 안에 li 요소 3개가 내용으로 가지고 있다 -> 요소 안에 다른 요소가 여러 개 들어있을 수 있다
 - ul은 부모요소(상위요소), li은 자식요소(하위요소)
 - 구분해서 작성하는 기본은 들여쓰기를 사용하는 것이다
 - 들여쓰기를 하지 않는다고 오류가 나지는 않지만 가독성을 위해 들여쓰기는 기본이다
 
>> 주석(Comments)
 - 주석을 작성하는 목적은 코드에 메모를 추가해 이해를 돕거나, 혹은 사용하지 않는 코드를 임시로 처리하기 위함에 있다
 
 - 표기 방법 
<!-- 나는 주석이다 -->

 - 브라우저는 주석을 완전히 무시
 - 주석은 정말 필요한 위치에, 필요한 내용만 적는 것을 권장한다


>> HTML문서의 구조
<!DOCTYPE html> : 생략해도 문제없으나 선언의 관습화로 남아있는 태그
<html> : 하나의 문서에 하나만 존재. 최상위 요소 혹은 root 요소라고 명명
	<head> : 화면에는 표시되지 않는, 정보를 담고 있는 영역
	<!--HEAD 영역-->
	</head>
	<body> : 실질적으로 화면에 나타나는 모든 콘텐츠/ 영역
	<!--BODY 영역-->
	</body>
</html>

>> HEAD 태그
/*
"태그를 공부할 때는 구글링을 통해 정보를 스캔하는 능력을 키우면서 학습하는 것을 추천하며 지금부터 연습하는 것을 권장한다."
-> '검색하고자 하는 태그 이름' mdn 으로 검색
 - MDN Web Docs : 웹 페이지 뿐 아니라 웹 개발은 전반적인 내용을 찾을 수 있는 홈페이지 -> 이 안에서 정보를 우선 찾는 것을 추천
*/

 - title, script, style 등이 포함된다  
 - 기계 처리를 위한 정보로 사람이 읽을 수 있는 정보가 아니다
 - head 태그는 생략이 가능하지만 실수 발생 등 생략해서 좋을 것 없다. 생략하지 말고 작성하도록 하자


>> BODY 태그
 - HTML 문서 내용을 나타내는 영역
 - head와 마찬가지로 한 문서에 하나만 존재 가능하며 생략 가능하나 하지 말자
 - 속성(Attribute)
* 소제목 옆에 빨간 휴지통 아이콘이 있는 태그는 거의 사용하지 않는 태그로 사용을 권장하지 않는 태그를 표시한 것이다


>> 태그를 구분짓는 특성 (body 영역에 한해서 태그 특성 구분)
1. 구획을 나누는 태그 
 - layout에 의해서 기준에 따라서 session 별로 구분을 할 때 사용한다
 - 내부에 내용이 없으면 눈에 보이지 않는다
 - 컨테이너의 역할을 하는 태그

2. 그 자체로 요소인 태그
 - 예. button 태그

>> 블록(Block)과 인라인(Inline)
 - 태그마다 생성된 시점부터 정해져있다
 - html에서는 라인별로 맨 위에서부터 아래로 읽어 내려가며 웹 페이지에 적용된다
 - css 요소를 별도로 주지 않았다면 맨 위의 라인은 웹 페이지의 좌상단에 위치한다
 - 인라인 요소 다음에 블록 요소가 작성되면 블록 요소는 다음 행에 나타난다
 - 인라인 요소는 블록 요소를 포함할 수 없으며, 반대로 대부분의 블록 요소는 인라인 요소를 포함할 수 없다

 1. 블록(Block)
 - 가지고 있는 높이만큼 한 층, 즉 한 줄 영역을 차지한다. ( 다른 요소가 같은 줄에 추가될 수 없음)
 - 가로 길이는 부모 요소가 허용한 최대 길이
 - 다음 요소는 다음 줄부터 적용
 2. 인라인(Inline)
 - 줄의 어느 곳에서나 시작할 수 있다
 - 이전 요소가 끝나는 지점부터 시작해서 내용(content)이 가지고 있는 만큼만 영역을 차지한다

>> 콘텐츠 카테고리  
 - 하나의 요소가 여러 카테고리 내의 포함 관계에 들어갈 수도 있다
 - 모든 내용을 암기하거나, 모든 태그은 콘텐츠 카테고리를 알 필요는 없으나 알아두는 정도로 익힌다
 
1. 메타데이터 콘텐츠(Metadata content) : 문서의 메타데이터(정보), 다른 문서를 가리키는 링크 등을 나타내틑 요소
2. 플로우 콘텐츠(Flow content) : 거의 모든 요소가 포함
3. 섹션 콘텐츠(Section content) : 웹 문서의 구획을 나눌 때 사용
4. 헤딩 콘텐츠(Heading content) : 섹션의 제목과 관련된 요소
5. 프레이징 콘텐츠(Phrasing content) : 문단에서 텍스트를 마크업할 때 사용
6. 임베디드 콘텐츠(Embedded content) : 외부 소스를 가져오거나 삽입할 때 사용되는 구조
7. 인터렉티브 콘텐츠(Interative content) : 사용자와 상호작용을 위한 콘텐츠 요소
